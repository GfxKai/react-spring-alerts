{"version":3,"sources":["riskReward.js","components/SubmitButton.js","App.js","serviceWorker.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","dangerousRequestAsync","a","Math","random","Error","AlertButton","label","Alerts","useAlerts","useState","loading","setLoading","setLoadState","isLoading","appContainerClassList","document","querySelector","classList","add","remove","onSubmit","unlikelyResult","showAlert","type","title","message","duration","className","onClick","disabled","AppWithAlerts","transitionConfig","from","marginTop","opacity","enter","leave","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAAMA,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SACtB,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAYtBI,EATY,uCAAG,sBAAAC,EAAA,sEACpBN,EAAM,KADc,YAEXO,KAAKC,SACP,IAHa,yCAIf,uCAJe,aAMpB,IAAIC,MAAM,+BANU,2CAAH,qDC6CZC,G,MA5CK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,EAASC,sBADgB,EAEDC,oBAAS,GAFR,mBAExBC,EAFwB,KAEfC,EAFe,KAGzBC,EAAe,SAACC,GAClB,IAAMC,EAAwBC,SAASC,cAAc,SAASC,UAC1DJ,EACAC,EAAsBI,IAAI,WAE1BJ,EAAsBK,OAAO,WAEjCR,EAAWE,IAETO,EAAQ,uCAAG,4BAAAnB,EAAA,sEAETW,GAAa,GAFJ,SAGoBZ,IAHpB,OAGHqB,EAHG,OAITd,EAAOe,UAAU,CACbC,KAAM,UACNC,MAAO,UACPC,QAASJ,IAPJ,gDAUTd,EAAOe,UAAU,CACbC,KAAM,QACNC,MAAO,QACPC,QAAS,KAAEA,QACXC,SAAU,IAdL,yBAiBTd,GAAa,GAjBJ,4EAAH,qDAoBd,OACI,4BACIW,KAAK,SACLI,UAAU,gBACVC,QAAUR,EACVS,SAAWnB,GAETJ,KCfCwB,G,MAxBO,WAelB,OACI,kBAAC,gBAAD,CAAeC,iBAfM,CACrBC,KAAM,CACFC,UAAW,EACXC,QAAS,GAEbC,MAAO,CACHF,UAAW,GACXC,QAAS,GAEbE,MAAO,CACHH,UAAW,EACXC,QAAS,KAKT,yBAAKP,UAAU,OACX,kBAAC,EAAD,CAAcrB,MAAM,yBCXhB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2dcd4a80.chunk.js","sourcesContent":["const delay = (ms) => new Promise(\n    (resolve) => setTimeout(resolve, ms)\n);\n\nconst dangerousRequestAsync = async () => {\n    await delay(1000);\n    const random = Math.random();\n    if (random > 0.5) {\n        return 'Congratulations! Everything is fine';\n    }\n    throw new Error('Today is not your lucky day');\n};\n\nexport default dangerousRequestAsync;\n","import React, { useState } from 'react';\nimport { useAlerts } from 'react-spring-alerts';\nimport dangerousRequestAsync from '../riskReward';\nimport './SubmitButton.css';\n\nconst AlertButton = ({ label }) => {\n    const Alerts = useAlerts();\n    const [loading, setLoading] = useState(false);\n    const setLoadState = (isLoading) => {\n        const appContainerClassList = document.querySelector('#root').classList;\n        if (isLoading) {\n            appContainerClassList.add('loading');\n        } else {\n            appContainerClassList.remove('loading');\n        }\n        setLoading(isLoading);\n    }\n    const onSubmit = async () => {\n        try {\n            setLoadState(true);\n            const unlikelyResult = await dangerousRequestAsync();\n            Alerts.showAlert({\n                type: 'success',\n                title: 'Success',\n                message: unlikelyResult,\n            });\n        } catch (e) {\n            Alerts.showAlert({\n                type: 'error',\n                title: 'Error',\n                message: e.message,\n                duration: 0,\n            });\n        } finally {\n            setLoadState(false);\n        }\n    };\n    return (\n        <button\n            type=\"button\"\n            className=\"submit-button\"\n            onClick={ onSubmit }\n            disabled={ loading }\n        >\n            { label }\n        </button>\n    );\n};\n\nexport default AlertButton;\n","import React from 'react';\nimport { AlertsWrapper } from 'react-spring-alerts';\nimport SubmitButton from './components/SubmitButton';\nimport './App.css';\n\nconst AppWithAlerts = () => {\n    const transitionConfig = {\n        from: {\n            marginTop: 0,\n            opacity: 0,\n        },\n        enter: {\n            marginTop: 12,\n            opacity: 1,\n        },\n        leave: {\n            marginTop: 0,\n            opacity: 0,\n        }\n    };\n    return (\n        <AlertsWrapper transitionConfig={ transitionConfig }>\n            <div className=\"app\">\n                <SubmitButton label=\"Trigger an Alert\" />\n            </div>\n        </AlertsWrapper>\n    );\n};\n\nexport default AppWithAlerts;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}